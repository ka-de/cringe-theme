const digitLookup=new Uint8Array(128);for(let i=0;i<83;i++)digitLookup["0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~".charCodeAt(i)]=i;const decode83=(str,start,end)=>{let value=0;for(;start<end;)value*=83,value+=digitLookup[str.charCodeAt(start++)];return value},pow=Math.pow,PI=Math.PI,PI2=2*PI,d=3294.6,e=269.025,sRGBToLinear=value=>value>10.31475?pow(value/e+.052132,2.4):value/d,linearTosRGB=v=>~~(v>1227e-8?e*pow(v,.416666)-13.025:v*d+1),signSqr=x=>(x<0?-1:1)*x*x,fastCos=x=>{for(x+=PI/2;x>PI;)x-=PI2;const cos=1.27323954*x-.405284735*signSqr(x);return.225*(signSqr(cos)-cos)+cos};export function getBlurHashAverageColor(blurHash){const val=decode83(blurHash,2,6);return[val>>16,val>>8&255,255&val]}export function decodeBlurHash(blurHash,width,height,punch){const sizeFlag=decode83(blurHash,0,1),numX=sizeFlag%9+1,numY=1+~~(sizeFlag/9),size=numX*numY;let i=0,j=0,x=0,y=0,r=0,g=0,b=0,basis=0,basisY=0,colorIndex=0,pixelIndex=0,value=0;const maximumValue=(decode83(blurHash,1,2)+1)/13446*(1|punch),colors=new Float64Array(3*size),averageColor=getBlurHashAverageColor(blurHash);for(i=0;i<3;i++)colors[i]=sRGBToLinear(averageColor[i]);for(i=1;i<size;i++)value=decode83(blurHash,4+2*i,6+2*i),colors[3*i]=signSqr(~~(value/361)-9)*maximumValue,colors[3*i+1]=signSqr(~~(value/19)%19-9)*maximumValue,colors[3*i+2]=signSqr(value%19-9)*maximumValue;const cosinesY=new Float64Array(numY*height),cosinesX=new Float64Array(numX*width);for(j=0;j<numY;j++)for(y=0;y<height;y++)cosinesY[j*height+y]=fastCos(PI*y*j/height);for(i=0;i<numX;i++)for(x=0;x<width;x++)cosinesX[i*width+x]=fastCos(PI*x*i/width);const bytesPerRow=4*width,pixels=new Uint8ClampedArray(bytesPerRow*height);for(y=0;y<height;y++)for(x=0;x<width;x++){for(r=g=b=0,j=0;j<numY;j++)for(basisY=cosinesY[j*height+y],i=0;i<numX;i++)basis=cosinesX[i*width+x]*basisY,colorIndex=3*(i+j*numX),r+=colors[colorIndex]*basis,g+=colors[colorIndex+1]*basis,b+=colors[colorIndex+2]*basis;pixelIndex=4*x+y*bytesPerRow,pixels[pixelIndex]=linearTosRGB(r),pixels[pixelIndex+1]=linearTosRGB(g),pixels[pixelIndex+2]=linearTosRGB(b),pixels[pixelIndex+3]=255}return pixels}function renderBlurHash(blurHash,canvas,width,height){const pixels=decodeBlurHash(blurHash,width,height),ctx=canvas.getContext("2d"),imageData=new ImageData(pixels,width,height);canvas.width=width,canvas.height=height,ctx.putImageData(imageData,0,0)}document.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll("canvas.blur-hash").forEach((canvas=>{renderBlurHash(canvas.dataset.blurhash,canvas,canvas.width,canvas.height)}))}));